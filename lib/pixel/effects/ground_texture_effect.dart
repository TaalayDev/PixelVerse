part of 'effects.dart';

// Helper class to store texture data
class _GroundTexture {
  final String name;
  final int size; // a square texture, so size x size
  final List<int> data; // color data in 0xAARRGGBB format

  const _GroundTexture(this.name, this.size, this.data);
}

/// Effect that applies a predefined ground texture to the image.
class GroundTextureEffect extends Effect {
  GroundTextureEffect([Map<String, dynamic>? parameters])
      : super(
          EffectType.groundTexture,
          parameters ??
              const {
                'textureType': 0,
                'scale': 16.0,
                'blend': 0.75,
              },
        );

  // Static map holding all available textures, now with new and improved ones
  static final Map<int, _GroundTexture> _textures = {
    0: const _GroundTexture('Dirt & Rocks', 8, _enhancedDirtAndRocks),
    1: const _GroundTexture('Mossy Stone', 8, _enhancedMossyStone),
    2: const _GroundTexture('Rich Sand', 8, _richSand),
    3: const _GroundTexture('Pebble Gravel', 8, _pebbleGravel),
    4: const _GroundTexture('Terracotta Clay', 8, _terracottaClay),
    5: const _GroundTexture('Red Bricks', 8, _redBricks),
    6: const _GroundTexture('Stone Blocks', 8, _stoneBlocks),
    7: const _GroundTexture('Cracked Ice', 8, _crackedIce),
    8: const _GroundTexture('Dark Cobblestone', 8, _darkCobblestone),
    9: const _GroundTexture('Sandy Gravel', 8, _sandyGravel),
    10: const _GroundTexture('Volcanic Rock', 8, _volcanicRock),
  };

  @override
  Map<String, dynamic> getDefaultParameters() {
    return {
      'textureType': 0, // Index of the texture in _textures
      'scale': 16.0, // Size of texture tiles in pixels
      'blend': 0.75, // How much to blend with the original image (0-1)
    };
  }

  @override
  Map<String, dynamic> getMetadata() {
    return {
      'textureType': {
        'label': 'Texture Type',
        'description': 'Selects the ground texture to apply.',
        'type': 'select',
        // This dynamically creates the options list from the textures map
        'options': {for (var entry in _textures.entries) entry.key: entry.value.name},
      },
      'scale': {
        'label': 'Scale',
        'description': 'Controls the size of the texture pattern.',
        'type': 'slider',
        'min': 2.0,
        'max': 64.0,
        'divisions': 62,
      },
      'blend': {
        'label': 'Blend Intensity',
        'description': 'How much the texture is blended with the original image.',
        'type': 'slider',
        'min': 0.0,
        'max': 1.0,
        'divisions': 100,
      },
    };
  }

  @override
  Uint32List apply(Uint32List pixels, int width, int height) {
    // Ensure parameters are correctly typed
    final textureType = (parameters['textureType'] as num).toInt();
    final scale = (parameters['scale'] as num).toDouble().clamp(1.0, 256.0);
    final blend = (parameters['blend'] as num).toDouble().clamp(0.0, 1.0);

    final result = Uint32List.fromList(pixels);
    final texture = _textures[textureType];

    // If texture not found, return original pixels
    if (texture == null) {
      return result;
    }

    final textureData = texture.data;
    final textureSize = texture.size;

    for (int y = 0; y < height; y++) {
      for (int x = 0; x < width; x++) {
        final index = y * width + x;
        final originalPixel = pixels[index];

        // Skip transparent pixels to preserve image shapes
        if (((originalPixel >> 24) & 0xFF) == 0) {
          continue;
        }

        // Calculate texture coordinates to tile the pattern
        final texX = (x / scale * textureSize).floor() % textureSize;
        final texY = (y / scale * textureSize).floor() % textureSize;
        final texturePixel = textureData[texY * textureSize + texX];

        // Blend colors using linear interpolation for a smooth effect
        final origA = (originalPixel >> 24) & 0xFF;
        final origR = (originalPixel >> 16) & 0xFF;
        final origG = (originalPixel >> 8) & 0xFF;
        final origB = originalPixel & 0xFF;

        final texR = (texturePixel >> 16) & 0xFF;
        final texG = (texturePixel >> 8) & 0xFF;
        final texB = texturePixel & 0xFF;

        final newR = (origR * (1 - blend) + texR * blend).round().clamp(0, 255);
        final newG = (origG * (1 - blend) + texG * blend).round().clamp(0, 255);
        final newB = (origB * (1 - blend) + texB * blend).round().clamp(0, 255);

        result[index] = (origA << 24) | (newR << 16) | (newG << 8) | newB;
      }
    }

    return result;
  }
}

// --- Texture Data Definitions (8x8 ARGB patterns) ---

// --- IMPROVED EXISTING TEXTURES ---

// More contrast and clearer rock shapes
const List<int> _enhancedDirtAndRocks = [
  0xFF5C4739,
  0xFF4A3A2C,
  0xFF8A7A6A,
  0xFF5C4739,
  0xFF4A3A2C,
  0xFF514235,
  0xFF8A7A6A,
  0xFF4A3A2C,
  0xFF8A7A6A,
  0xFF514235,
  0xFF4A3A2C,
  0xFF5C4739,
  0xFF514235,
  0xFF8A7A6A,
  0xFF5C4739,
  0xFF4A3A2C,
  0xFF4A3A2C,
  0xFF5C4739,
  0xFF514235,
  0xFF8A7A6A,
  0xFF4A3A2C,
  0xFF5C4739,
  0xFF4A3A2C,
  0xFF514235,
  0xFF514235,
  0xFF8A7A6A,
  0xFF4A3A2C,
  0xFF5C4739,
  0xFF514235,
  0xFF4A3A2C,
  0xFF8A7A6A,
  0xFF5C4739,
  0xFF5C4739,
  0xFF4A3A2C,
  0xFF8A7A6A,
  0xFF514235,
  0xFF5C4739,
  0xFF4A3A2C,
  0xFF514235,
  0xFF8A7A6A,
  0xFF4A3A2C,
  0xFF514235,
  0xFF5C4739,
  0xFF4A3A2C,
  0xFF8A7A6A,
  0xFF5C4739,
  0xFF4A3A2C,
  0xFF514235,
  0xFF8A7A6A,
  0xFF5C4739,
  0xFF4A3A2C,
  0xFF514235,
  0xFF4A3A2C,
  0xFF8A7A6A,
  0xFF5C4739,
  0xFF4A3A2C,
  0xFF514235,
  0xFF4A3A2C,
  0xFF5C4739,
  0xFF8A7A6A,
  0xFF514235,
  0xFF4A3A2C,
  0xFF5C4739,
  0xFF8A7A6A,
];

// More defined moss patches over darker stone
const List<int> _enhancedMossyStone = [
  0xFF4A5A40,
  0xFF5A6B50,
  0xFF696969,
  0xFF505050,
  0xFF4A5A40,
  0xFF696969,
  0xFF505050,
  0xFF696969,
  0xFF5A6B50,
  0xFF3C4D35,
  0xFF4A5A40,
  0xFF696969,
  0xFF505050,
  0xFF4A5A40,
  0xFF3C4D35,
  0xFF505050,
  0xFF696969,
  0xFF4A5A40,
  0xFF5A6B50,
  0xFF505050,
  0xFF696969,
  0xFF505050,
  0xFF4A5A40,
  0xFF696969,
  0xFF505050,
  0xFF696969,
  0xFF3C4D35,
  0xFF4A5A40,
  0xFF505050,
  0xFF696969,
  0xFF5A6B50,
  0xFF505050,
  0xFF4A5A40,
  0xFF505050,
  0xFF696969,
  0xFF5A6B50,
  0xFF3C4D35,
  0xFF505050,
  0xFF696969,
  0xFF4A5A40,
  0xFF696969,
  0xFF4A5A40,
  0xFF505050,
  0xFF696969,
  0xFF5A6B50,
  0xFF4A5A40,
  0xFF505050,
  0xFF3C4D35,
  0xFF505050,
  0xFF3C4D35,
  0xFF4A5A40,
  0xFF5A6B50,
  0xFF696969,
  0xFF505050,
  0xFF4A5A40,
  0xFF696969,
  0xFF696969,
  0xFF505050,
  0xFF696969,
  0xFF4A5A40,
  0xFF505050,
  0xFF3C4D35,
  0xFF5A6B50,
  0xFF505050,
];

// Warmer tones and subtle highlights
const List<int> _richSand = [
  0xFFF0E0A0,
  0xFFE8D89C,
  0xFFD9C98E,
  0xFFF5E6A8,
  0xFFE4D396,
  0xFFF0E0A0,
  0xFFD9C98E,
  0xFFE8D89C,
  0xFFE8D89C,
  0xFFF5E6A8,
  0xFFE4D396,
  0xFFD9C98E,
  0xFFF0E0A0,
  0xFFE8D89C,
  0xFFF5E6A8,
  0xFFD9C98E,
  0xFFD9C98E,
  0xFFE4D396,
  0xFFF5E6A8,
  0xFFE8D89C,
  0xFFF0E0A0,
  0xFFD9C98E,
  0xFFE8D89C,
  0xFFF5E6A8,
  0xFFF5E6A8,
  0xFFF0E0A0,
  0xFFE8D89C,
  0xFFD9C98E,
  0xFFE4D396,
  0xFFF5E6A8,
  0xFFD9C98E,
  0xFFE8D89C,
  0xFFE4D396,
  0xFFD9C98E,
  0xFFF5E6A8,
  0xFFE8D89C,
  0xFFF0E0A0,
  0xFFE4D396,
  0xFFF5E6A8,
  0xFFD9C98E,
  0xFFF0E0A0,
  0xFFE8D89C,
  0xFFE4D396,
  0xFFF5E6A8,
  0xFFD9C98E,
  0xFFE8D89C,
  0xFFF0E0A0,
  0xFFE4D396,
  0xFFD9C98E,
  0xFFF5E6A8,
  0xFFE8D89C,
  0xFFE4D396,
  0xFFF0E0A0,
  0xFFD9C98E,
  0xFFF5E6A8,
  0xFFE8D89C,
  0xFFE8D89C,
  0xFFE4D396,
  0xFFF0E0A0,
  0xFFD9C98E,
  0xFFF5E6A8,
  0xFFE8D89C,
  0xFFE4D396,
  0xFFF0E0A0,
];

// More color variation for a natural look
const List<int> _pebbleGravel = [
  0xFF8A8A8A,
  0xFF787878,
  0xFF696969,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF787878,
  0xFF696969,
  0xFF9D9D9D,
  0xFF787878,
  0xFF696969,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF787878,
  0xFF696969,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF696969,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF787878,
  0xFF696969,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF787878,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF787878,
  0xFF696969,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF787878,
  0xFF696969,
  0xFF8A8A8A,
  0xFF787878,
  0xFF696969,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF787878,
  0xFF696969,
  0xFF9D9D9D,
  0xFF787878,
  0xFF696969,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF787878,
  0xFF696969,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF696969,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF787878,
  0xFF696969,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF787878,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF787878,
  0xFF696969,
  0xFF9D9D9D,
  0xFF8A8A8A,
  0xFF787878,
  0xFF696969,
];

// Richer, earthy red-brown tones
const List<int> _terracottaClay = [
  0xFFB5651D,
  0xFFA0522D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFB5651D,
  0xFFA0522D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFA0522D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFB5651D,
  0xFFA0522D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFB5651D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFB5651D,
  0xFFA0522D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFB5651D,
  0xFFA0522D,
  0xFFCD853F,
  0xFFB5651D,
  0xFFA0522D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFB5651D,
  0xFFA0522D,
  0xFF8B4513,
  0xFFB5651D,
  0xFFA0522D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFB5651D,
  0xFFA0522D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFA0522D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFB5651D,
  0xFFA0522D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFB5651D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFB5651D,
  0xFFA0522D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFB5651D,
  0xFFA0522D,
  0xFFCD853F,
  0xFFB5651D,
  0xFFA0522D,
  0xFF8B4513,
  0xFFCD853F,
  0xFFB5651D,
  0xFFA0522D,
  0xFF8B4513,
];

// --- NEW TEXTURES INSPIRED BY IMAGE ---

// New: Classic red brick wall pattern
const List<int> _redBricks = [
  0xFFB22222,
  0xFFB22222,
  0xFFB22222,
  0xFFB22222,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFF404040,
  0xFF404040,
  0xFF404040,
  0xFF404040,
  0xFF404040,
  0xFF404040,
  0xFF404040,
  0xFF404040,
  0xFFB22222,
  0xFFB22222,
  0xFFB22222,
  0xFFB22222,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFFB22222,
  0xFFB22222,
  0xFFB22222,
  0xFFB22222,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFFB22222,
  0xFFB22222,
  0xFFB22222,
  0xFFB22222,
  0xFF404040,
  0xFF404040,
  0xFF404040,
  0xFF404040,
  0xFF404040,
  0xFF404040,
  0xFF404040,
  0xFF404040,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFFB22222,
  0xFFB22222,
  0xFFB22222,
  0xFFB22222,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFF8B0000,
  0xFFB22222,
  0xFFB22222,
  0xFFB22222,
  0xFFB22222,
];

// New: Grey stone blocks with highlights and shadows
const List<int> _stoneBlocks = [
  0xFFC0C0C0,
  0xFFD3D3D3,
  0xFFD3D3D3,
  0xFFD3D3D3,
  0xFFC0C0C0,
  0xFFD3D3D3,
  0xFFD3D3D3,
  0xFFD3D3D3,
  0xFFA9A9A9,
  0xFFC0C0C0,
  0xFFC0C0C0,
  0xFFC0C0C0,
  0xFFA9A9A9,
  0xFFC0C0C0,
  0xFFC0C0C0,
  0xFFC0C0C0,
  0xFFA9A9A9,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFFA9A9A9,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFFC0C0C0,
  0xFFD3D3D3,
  0xFFD3D3D3,
  0xFFD3D3D3,
  0xFFC0C0C0,
  0xFFD3D3D3,
  0xFFD3D3D3,
  0xFFD3D3D3,
  0xFFA9A9A9,
  0xFFC0C0C0,
  0xFFC0C0C0,
  0xFFC0C0C0,
  0xFFA9A9A9,
  0xFFC0C0C0,
  0xFFC0C0C0,
  0xFFC0C0C0,
  0xFFA9A9A9,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFFA9A9A9,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
  0xFF808080,
];

// New: Light blue ice with white cracks
const List<int> _crackedIce = [
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFB0E0E6,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFADD8E6,
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFB0E0E6,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFADD8E6,
  0xFFB0E0E6,
  0xFFFFFFFF,
  0xFFB0E0E6,
  0xFFADD8E6,
];

// New: Dark, irregular cobblestone pattern
const List<int> _darkCobblestone = [
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
  0xFF36454F,
  0xFF2F4F4F,
];

// New: Mix of sand and small orange/brown pebbles
const List<int> _sandyGravel = [
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFBC8F8F,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFD2B48C,
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFBC8F8F,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFD2B48C,
  0xFFF4A460,
  0xFFD2B48C,
  0xFFBC8F8F,
  0xFFD2B48C,
];

// New: Dark volcanic rock with glowing cracks
const List<int> _volcanicRock = [
  0xFF1C1C1C,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFFFF4500,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFF222222,
  0xFFFF4500,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFF1C1C1C,
  0xFF1C1C1C,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFFFF4500,
  0xFF222222,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFFFF4500,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFF1C1C1C,
  0xFFFF4500,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFF1C1C1C,
  0xFFFF4500,
  0xFF1C1C1C,
  0xFF222222,
  0xFF1C1C1C,
  0xFF1C1C1C,
  0xFF222222,
  0xFFFF4500,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFF1C1C1C,
  0xFF222222,
  0xFF1C1C1C,
  0xFFFF4500,
  0xFF1C1C1C,
];
